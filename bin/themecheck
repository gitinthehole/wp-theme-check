#!/usr/bin/env node

const path = require('path')
const program = require('caporal')
const updateNotifier = require('update-notifier')
const ora = require('ora')
const chalk = require('chalk')
const pkg = require('../package.json')
const themeCheck = require('../src/theme-check')
const {
  validatorTypes,
  validatorLabels,
  validatorThemeCheckLabels,
  errorTypes
} = require('../src/fixtures')
const logger = require('../src/logger')

const simpleDotsLoader = {
  interval: 70,
  frames: [
    '.  ',
    '.. ',
    ' ..',
    ' ..',
    '  .',
    '   '
  ]
}

const action = (args, options) => {
  let spinner

  if (options.ruleList) {
    if (options.json) {
      logger.json(Object.keys(validatorThemeCheckLabels))
    } else {
      process.stdout.write(`\n${chalk.cyan('Rule list')}\n\n`)
      for (const label in validatorThemeCheckLabels) {
        process.stdout.write(`  ${chalk.gray('*')} ${chalk.cyan(label)}\n`)
      }
      process.stdout.write('\n')
    }
    process.exit()
  }

  if (!options.json) {
    logger.blank()
    spinner = ora('Checking theme...').start()
    spinner.spinner = simpleDotsLoader
  }

  const nonZeroExit = err => {
    spinner.stop()
    logger.error(err.message)
    process.exit(1)
  }

  const opts = {
    validator: [
      validatorTypes.THEME_MENTOR,
      validatorTypes.THEME_CHECK
    ]
  }

  if (options.withThemeCheck) {
    opts.validator = [validatorTypes.THEME_CHECK]
  }

  if (options.withThemeMentor) {
    opts.validator = [validatorTypes.THEME_MENTOR]
  }

  if (options.excludes) {
    opts.excludes = options.excludes.split(',')
  }

  themeCheck(args.path, opts).then(results => {
    let errors = 0
    let warnings = 0

    if (options.excludeRules) {
      options.exludeRules = options.excludeRules.split(',')
      results = results.map(validator => {
        if (validator.type === validatorTypes.THEME_CHECK) {
          validator.result = validator.result.filter(item => {
            return !options.exludeRules.includes(item.label)
          })
        }

        return validator
      })
    }

    if (options.json) {
      const json = {}

      results.forEach(validator => {
        validator.result.forEach(item => {
          if (validator.type === validatorTypes.THEME_MENTOR) {
            if (item.type === errorTypes.ERROR) {
              errors++
            }
          } else {
            item.items.forEach(log => {
              if (log.type === errorTypes.WARNING) {
                warnings++
              }
              if (log.type === errorTypes.ERROR) {
                errors++
              }
            })
          }
        })

        json[validator.type] = validator.result
      })

      logger.json(json)

      if (errors > 0 || (warnings > 0 && !options.skipWarning)) {
        process.exit(1)
      } else {
        process.exit()
      }
    }

    logger.blank()
    spinner.stop()

    Promise.all(results.map(
      (validator, index) => new Promise(resolve => {
        if (validator.result.length > 0) {
          logger.blank()

          if (index > 0) {
            logger.blank()
            logger.blank()
          }

          logger.title(validatorLabels[validator.id])
          logger.blank()

          Promise.all(validator.result.map(
            (item, index) => new Promise(resolve => {
              if (index > 0) {
                logger.blank()
              }

              if (validator.type === validatorTypes.THEME_MENTOR) {
                if (item.type === errorTypes.ERROR) {
                  errors++
                }
                logger.error(item)
                logger.underline(`${path.join(args.path, item.filename)}:${item.line}`)
              } else {
                logger.underline(validatorThemeCheckLabels[item.label])
                item.items.forEach((log, index) => {
                  if (log.type === errorTypes.WARNING) {
                    warnings++
                  }
                  if (log.type === errorTypes.ERROR) {
                    errors++
                  }
                  logger.error2(log)

                  if (index < item.items.length - 1) {
                    logger.blank()
                  }
                })
              }
              resolve()
            })
          )).then(resolve).catch(nonZeroExit)

        } else {
          resolve()
        }
      })
    )).then(() => {
      logger.blank()

      if (errors > 0 || warnings > 0) {
        let notice = 'You\'ve got'

        if (errors > 0) {
          notice += ` ${errors} errors`
        }

        if (warnings > 0) {
          if (errors > 0) {
            notice += ' and'
          }
          notice += ` ${warnings} warnings`
        }

        notice += '.'

        logger.blank()
        if (errors > 0) {
          logger.error(notice)
        }

        if (errors === 0 && (warnings > 0 && !options.skipWarning)) {
          logger.warning(notice)
        }

        logger.blank()

        if (errors > 0 || (warnings > 0 && !options.skipWarning)) {
          process.exit(1)
        } else {
          process.exit()
        }
      } else {
        logger.done('Your theme have no errors.')
        logger.blank()
      }
    }).catch(nonZeroExit)
  }).catch(nonZeroExit)
}

program
  .version(pkg.version)
  .description('WordPress Theme Check')
  .argument('[path]', 'Script path could be theme directory.')
  .option('--excludes', 'Excludes path, separated by commas.', program.STRING)
  .option('--exclude-rules', 'Exclude rules by label for `theme-check`, separated by commas', program.STRING)
  .option('--rule-list', 'Display available rules for `theme-check`', program.BOOLEAN)
  .option('--with-theme-mentor', 'Only use theme mentor as validator.', program.BOOLEAN)
  .option('--with-theme-check', 'Only use theme check as validator.', program.BOOLEAN)
  .option('--json', 'Print output as JSON format.', program.BOOLEAN)
  .option('--skip-warning', 'Skip warning message.', program.BOOLEAN)
  .action(action)

program.parse(process.argv)

// Notify update, cached every hour
updateNotifier({
  pkg,
  updateCheckInterval: 1000 * 60 * 60
}).notify()
